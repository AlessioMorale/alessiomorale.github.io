<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xslt/atom.xslt" ?>
<?xml-stylesheet type="text/css" href="/assets/css/atom.css" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<id>https://blog.alessiomorale.com/</id>
	<title>A*Morale</title>
	<updated>2023-08-23T13:54:58+00:00</updated>

	<subtitle>a*m thoughts trash can:&lt;/br&gt; A blog about robotics, drones, electronics and software engineering</subtitle>

	
		
		<author>
			
				<name>A*Morale</name>
			
			
			
		</author>
	

	<link href="https://blog.alessiomorale.com/atom.xml" rel="self" type="application/rss+xml" />
	<link href="https://blog.alessiomorale.com/" rel="alternate" type="text/html" />

	<generator uri="http://jekyllrb.com" version="4.3.2">Jekyll</generator>

	
		<entry>
			<id>https://blog.alessiomorale.com/docker/jetson/nvidia/2021/03/22/creating-docker-images-for-jetson-nano-on-your-desktop.html</id>
			<title>Building Docker images for Jetson Nano on your desktop</title>
			<link href="https://blog.alessiomorale.com/docker/jetson/nvidia/2021/03/22/creating-docker-images-for-jetson-nano-on-your-desktop.html" rel="alternate" type="text/html" title="Building Docker images for Jetson Nano on your desktop" />
			<updated>2021-03-22T07:00:00+00:00</updated>

			
				
				<author>
					
						<name>Alessio Morale</name>
					
					
					
						<uri>https://blog.alessiomorale.com</uri>
					
				</author>
			
			<summary></summary>
			<content type="html" xml:base="https://blog.alessiomorale.com/docker/jetson/nvidia/2021/03/22/creating-docker-images-for-jetson-nano-on-your-desktop.html">&lt;p&gt;In this article I will show the workflow I’m using to be able to build Docker containers to be deployed on a Jetson Nano using my desktop machine.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#rationale&quot;&gt;Rationale&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#qemu&quot;&gt;QEMU&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#build-images-for-aarch64&quot;&gt;Build images for aarch64&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#issues&quot;&gt;Issues&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#whats-next&quot;&gt;What’s next&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021/03/IMG_20210321_235444.jpg&quot; alt=&quot;Jetson Nano&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;rationale&quot;&gt;Rationale&lt;/h2&gt;

&lt;p&gt;For some time I was looking at a simple, repeatable solution to deploy my ROS robot software on clean Jetson Nano/Jetpack installation. Wishing to use CUDA enabled version of the various packages where this is available also meant a lot of recompilation effort.
For this reason I searched for a solution to prepare them off-board, either on a desktop pc or even better using CI with Github/Gitlab.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;qemu&quot;&gt;QEMU&lt;/h2&gt;

&lt;p&gt;The first issue is the difference in architecture between the desktop machine (a common &lt;a href=&quot;https://en.wikipedia.org/wiki/X86-64&quot;&gt;x86-64/AMD64&lt;/a&gt; machine) and the target machine, an &lt;a href=&quot;https://en.wikipedia.org/wiki/AArch64&quot;&gt;AArch64&lt;/a&gt; cpu. Obviously Arm code cannot run on a x86/amd64 thus we need to use some kind of emulation in place.&lt;/p&gt;

&lt;p&gt;Fortunately there is a very nice tool that can came to the rescue, it is &lt;a href=&quot;https://www.qemu.org/&quot;&gt;QEMU&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To install qemu and setup it to run aarch64 code on your machine you need to run the following instructions. the first will install qemu and its prerequisite while the second line register qemu to be able to run aarch64 code using the emulation.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Configure aarch64 emulation&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;qemu binfmt-support qemu-user-static &lt;span class=&quot;c&quot;&gt;# Install the qemu packages&lt;/span&gt;
docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--privileged&lt;/span&gt; multiarch/qemu-user-static &lt;span class=&quot;nt&quot;&gt;--reset&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# This step will execute the registering scripts&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At this point you will be able to run any AArch64 code in your machine. This include docker images as well.&lt;/p&gt;

&lt;p&gt;You can test that everything is set up properly by trying to run a aarch64 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello world&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; arm64v8/hello-world:linux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If this shows you a (particularly long) hello world message then your installation is successful.&lt;/p&gt;

&lt;h2 id=&quot;build-images-for-aarch64&quot;&gt;Build images for aarch64&lt;/h2&gt;

&lt;p&gt;The good news is that at this point you can not only run container images for aarch64 but also build new images.&lt;/p&gt;

&lt;p&gt;Obviously the most important thing to take into account is to chose aarch64 images as base images for your docker containers.&lt;/p&gt;

&lt;p&gt;If you are going to run on a Jetson (Nano but the same applies to the other Jetsons as well). For additional informations you can look at the &lt;a href=&quot;https://developer.nvidia.com/embedded/jetson-cloud-native&quot;&gt;Cloud native on Jetson&lt;/a&gt; page. In that case you want to use one of the various version of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nvcr.io/nvidia/l4t-base&lt;/code&gt; image.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021/03/htop.png&quot; alt=&quot;htop&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;/h2&gt;

&lt;p&gt;The biggest issue with this approach is that the emulation is slow compared to a native execution. This is especially true for activities like code compilation. Thus it will probably take more time than if it was done onboard.&lt;/p&gt;

&lt;p&gt;As a partial workaround I used &lt;a href=&quot;https://ccache.dev/&quot;&gt;ccache&lt;/a&gt; to be able to reuse as much as possible the compilation work done for previous builds. Obviously you have to download and upload to some form of online storage the cache content during the build process. Initialy I implemented this process using bintray but I’ m now moving to some simple git repository.&lt;/p&gt;

&lt;p&gt;You can have a look at &lt;a href=&quot;https://github.com/AlessioMorale/jetson-ros-perception/blob/f219b7ac7fd1cbe24b7b951198c5ff273fcd291a/Dockerfile#L21&quot;&gt;this approach&lt;/a&gt;. For this to work I have to use BUILDKIT as it allows to use build time secrets that are not shipped inside the destination container (this would not be otherwise possible with the standard docker build as your storage secrets would be left in clear in the result container).&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next&lt;/h2&gt;

&lt;p&gt;This was just a little introduction on this topic. In the next articles we will dig a bit further in this topic analysing how can we build images using a GitHub Actions, and what are the things to take into account when building CUDA code on a different architecture than the runtime environment.&lt;/p&gt;
</content>

			
				<category term="docker" />
			
				<category term="jetson" />
			
				<category term="nvidia" />
			
			
				<category term="arm" />
			
				<category term="docker" />
			
				<category term="NVidia" />
			
				<category term="arm64" />
			
				<category term="Jetson nano" />
			
				<category term="qemu" />
			
				<category term="slammer" />
			

			<published>2021-03-22T07:00:00+00:00</published>
		</entry>
	
		<entry>
			<id>https://blog.alessiomorale.com/slammer/2020/06/10/sensors-and-multifunctional-light-for-slammer.html</id>
			<title>Sensors and multifunctional light for Slammer</title>
			<link href="https://blog.alessiomorale.com/slammer/2020/06/10/sensors-and-multifunctional-light-for-slammer.html" rel="alternate" type="text/html" title="Sensors and multifunctional light for Slammer" />
			<updated>2020-06-10T23:38:49+00:00</updated>

			
				
				<author>
					
						<name>[&quot;AlessioMorale&quot;]</name>
					
					
					
				</author>
			
			<summary></summary>
			<content type="html" xml:base="https://blog.alessiomorale.com/slammer/2020/06/10/sensors-and-multifunctional-light-for-slammer.html">&lt;p&gt;In the last few day I reviewed the design of the top and incorporated a few devices in it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A BNO055 IMU and its USB/Serial;&lt;/li&gt;
  &lt;li&gt;An uBlox GPS and its USB/Serial (I want to play with its doppler based velocity output that used to be of great help with drones);&lt;/li&gt;
  &lt;li&gt;A ws28xx like 2W led lamp, to be used to easily signal status/failures (like battery voltage under a certain threshold);&lt;/li&gt;
  &lt;li&gt;An USB Hub that connects to all the devices above to be able to use a single USB cable for the whole assembly.&lt;/li&gt;
  &lt;li&gt;A fan that is going to be controlled by UNAV;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020/06/IMG_20200518_112120.jpg&quot; alt=&quot;exterior&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020/06/IMG_20200518_112111.jpg&quot; alt=&quot;inside&quot; /&gt;&lt;/p&gt;
</content>

			
				<category term="slammer" />
			
			
				<category term="robot" />
			
				<category term="ROS" />
			
				<category term="slammer" />
			
				<category term="unav" />
			
				<category term="unav2" />
			

			<published>2020-06-10T23:38:49+00:00</published>
		</entry>
	
		<entry>
			<id>https://blog.alessiomorale.com/ros/uncategorized/2019/09/24/nvidia-jetracer.html</id>
			<title>NVidia JetRacer</title>
			<link href="https://blog.alessiomorale.com/ros/uncategorized/2019/09/24/nvidia-jetracer.html" rel="alternate" type="text/html" title="NVidia JetRacer" />
			<updated>2019-09-24T15:12:10+00:00</updated>

			
				
				<author>
					
						<name>[&quot;AlessioMorale&quot;]</name>
					
					
					
				</author>
			
			<summary></summary>
			<content type="html" xml:base="https://blog.alessiomorale.com/ros/uncategorized/2019/09/24/nvidia-jetracer.html">&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#power-supplymonitor&quot;&gt;Power supply/monitor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#remote-control&quot;&gt;Remote control&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusions&quot;&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/09/img_20190916_2135374343768061538133897.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some days ago I started this adventure with &lt;a href=&quot;https://github.com/NVIDIA-AI-IOT/jetracer&quot;&gt;JetRacer&lt;/a&gt;.There were a few things that I didn’t particularly like from the original design, mainly the fact that Jetson is powered from a USB powerbank (with the additional disadvantages of carrying a lot more weight, having to think about an additional battery and limiting the Jetson power profile to 5W) and the limited remote control possibilities.Beside that I wanted to base the whole system on ROS, so I had to port a few hardware relate nodes to the Nano.&lt;/p&gt;

&lt;p&gt;To address such issues I have done some modifications to the original design.&lt;/p&gt;

&lt;h2 id=&quot;power-supplymonitor&quot;&gt;Power supply/monitor&lt;/h2&gt;

&lt;p&gt;Power supply/monitorI like the idea to power the whole system from a single source. For this purpose I chose a 2S 2200 mAh LiPo battery that fits nicely with no major modifications in the existing bay.
Battery is connected to a small custom splitting board that allows to connect more devices in parallel to a single source.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/09/img_20190916_20094134962048368907300.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A connector is used to connect the Jetson Nano (powered with a small DC/DC). This easily allows to use a power supply during the development and disconnected from the rest of the car.
To suit the power requirements for nano (5V and at least 3A) I opted for a Pololu 2851-FBA, capable of operating from 6V and sourcing up to 5A.Previously I tried another chinese manufactured device just to discover that it needed more than 8.5V to operate, making it worthless with a 2 cells battery.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/09/img_20190916_2008272557472320786764662.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In addition I have included an I2C current and bus voltage monitor, INA219.Right now it is limited to monitor the Nano current consumption until I change the shunt resistance to a lower value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Very important note about INA219 and Jetson nano:&lt;/strong&gt; there is another I2C device with address 0x40 (it is something of the same INA family used to monitor board voltage/consumption) connected internally to the same I2C-1 bus, so it is mandatory to select a different address for it. I have used 0x43.&lt;/p&gt;

&lt;p&gt;Funny thing is that you can’t notice the issue but you will consistently have weird values, until remove the device and realize some thing is still answering your software. To handle this ic I made a few change to an existing node, to use the standard libi2c libraries so it works seamlessly on Nano &lt;a href=&quot;https://github.com/AlessioMorale/ros-power-ina219&quot;&gt;https://github.com/AlessioMorale/ros-power-ina219&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next step will be to calculate the integration of current consumption to estimate battery life remaining and moving to standard sensor messages&lt;/p&gt;

&lt;h2 id=&quot;remote-control&quot;&gt;Remote control&lt;/h2&gt;

&lt;p&gt;Considering its functionalities, ease of use and the fact that’s widely supported, o opted for a DS4 compatible controller. As a bonus point it has audio output capabilities, that later I want to exploit to communicate the Jetracer status.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/09/img_20190916_2207583040884031757302502.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;There are a few additional steps that I did, including adding an USB SSD and a few other things that I will address, together with all ROS related setup in a few following posts.I want to close this post with a few additional pictures and a short video of ROS teleop stack working.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/09/img_20190915_1133087453250750003722849.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/09/img_20190915_113322102000925495512880.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;youtube: https://www.youtube.com/watch?v=EyNWCuDqfIA&lt;/code&gt;&lt;/p&gt;
</content>

			
				<category term="ROS" />
			
				<category term="Uncategorized" />
			
			
				<category term="robot" />
			
				<category term="JetRacer" />
			
				<category term="Jetson nano" />
			
				<category term="Nvidia" />
			
				<category term="ROS" />
			

			<published>2019-09-24T15:12:10+00:00</published>
		</entry>
	
		<entry>
			<id>https://blog.alessiomorale.com/robot/ros/2017/11/01/setting-realsense-r200-odroid-xu4-ros.html</id>
			<title>Setting up Realsense R200 on Odroid XU4 with ROS</title>
			<link href="https://blog.alessiomorale.com/robot/ros/2017/11/01/setting-realsense-r200-odroid-xu4-ros.html" rel="alternate" type="text/html" title="Setting up Realsense R200 on Odroid XU4 with ROS" />
			<updated>2017-11-01T16:54:06+00:00</updated>

			
				
				<author>
					
						<name>[&quot;AlessioMorale&quot;]</name>
					
					
					
				</author>
			
			<summary></summary>
			<content type="html" xml:base="https://blog.alessiomorale.com/robot/ros/2017/11/01/setting-realsense-r200-odroid-xu4-ros.html">&lt;p&gt;&lt;em&gt;Update 1st may 2018: added a note to use realsense nodelet tag 1.8.1 and some patches to use ROS built from sources or GCC7.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This post will guide you through the configuration of a Realsense R200 on Odroid XU4. There is nothing strictly related to this platform so they should apply to any armhf/x86 Ubuntu 16.04.xx systems.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/11/DSC_0321.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s start from the requirements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an Ubuntu 16.04.xx installation;&lt;/li&gt;
  &lt;li&gt;ROS Kinetic (&lt;a href=&quot;http://wiki.ros.org/kinetic/Installation/Ubuntu&quot;&gt;installation instructions&lt;/a&gt;);&lt;/li&gt;
  &lt;li&gt;obviously a Realsense R200 🙂&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;preparing-the-workspace&quot;&gt;Preparing the workspace&lt;/h3&gt;

&lt;p&gt;Skip this section if you have already a workspace.&lt;/p&gt;

&lt;p&gt;If don’t, let’s do it now (remember to ‘source /opt/ros/kinetic/setup.bash’ in case you have not added it to your .bashrc):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ros_ws/src
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ros_ws/src
catkin_init_workspace&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h3&gt;

&lt;p&gt;Librealsense requires some prerequisites to be built:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libusb-1.0-0-dev pkg-config libglfw3-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;cloning-the-repositories&quot;&gt;Cloning the repositories&lt;/h3&gt;

&lt;p&gt;now it’s time to clone the &lt;a href=&quot;https://github.com/IntelRealSense/librealsense&quot;&gt;librealsense&lt;/a&gt; and the &lt;a href=&quot;https://github.com/intel-ros/realsense&quot;&gt;Realsense nodelet&lt;/a&gt; repo:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#librealsense&lt;/span&gt;
git clone https://github.com/IntelRealSense/librealsense.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;librealsense
git checkout v1.12.1
&lt;span class=&quot;c&quot;&gt;#setup udev rules. Connect or reconnect the camera the camera after the following two lines are executed&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo cp &lt;/span&gt;config/99-realsense-libusb.rules /etc/udev/rules.d/
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;udevadm control &lt;span class=&quot;nt&quot;&gt;--reload-rules&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; udevadm trigger
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;NOTE: if using ros built from source (and not installed under /opt/ros/* apply the following patch to librealsense:&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gh&quot;&gt;diff --git a/CMakeLists.txt b/CMakeLists.txt
index d6ed86e1..784da760 100644
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/CMakeLists.txt
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/CMakeLists.txt
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@@ -37,10 +37,8 @@&lt;/span&gt; assign_version_property(PATCH)
 set(REALSENSE_VERSION_STRING ${REALSENSE_VERSION_MAJOR}.${REALSENSE_VERSION_MINOR}.${REALSENSE_VERSION_PATCH})
 infoValue(REALSENSE_VERSION_STRING)
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;-IF(DEFINED CMAKE_PREFIX_PATH)
-  IF(&quot;${CMAKE_PREFIX_PATH}&quot; MATCHES &quot;/opt/ros&quot;)
-    set(ROS_BUILD_TYPE TRUE)
-  ENDIF()
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+IF(DEFINED CATKIN_DEVEL_PREFIX)
+  set(ROS_BUILD_TYPE TRUE)
&lt;/span&gt; ENDIF()
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt; IF (${ROS_BUILD_TYPE})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also if you are using gcc7 you probably need the next patch as well:&lt;/p&gt;

&lt;p&gt;librealsense_gcc7.diff:&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gh&quot;&gt;diff --git a/src/types.h b/src/types.h
index 0455c836..ed3b818a 100644
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/src/types.h
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/src/types.h
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@@ -22,6 +22,7 @@&lt;/span&gt;
 #include &amp;amp;lt;atomic&amp;amp;gt;
 #include &amp;amp;lt;map&amp;amp;gt;
 #include &amp;amp;lt;algorithm&amp;amp;gt;
&lt;span class=&quot;gi&quot;&gt;+#include &amp;amp;lt;functional&amp;amp;gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt; const uint8_t RS_STREAM_NATIVE_COUNT    = 5;
 const int RS_USER_QUEUE_SIZE = 20;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Please note that you need to use librealsense v1.12.1 and realsense 1.8.1 with R200 as the support was dropped in later versions.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#realsense nodelet&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..
git clone https://github.com/intel-ros/realsense.git
git checkout 1.8.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;building-and-testing&quot;&gt;Building and testing&lt;/h3&gt;

&lt;p&gt;You may move to the root of your workspace (ros_ws) and build it:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catkin_make -j4&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(j4 is required to prevent the compilation failures due to RAM constraints)&lt;/p&gt;

&lt;p&gt;In case of failure check whether it is asking for some dependencies (every distribution  has always a slightly different set of packages preinstalled).&lt;/p&gt;

&lt;p&gt;Now you can test if everything is working fine.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ./devel/setup.sh
&lt;span class=&quot;c&quot;&gt;#run the nodelet with default settings&lt;/span&gt;
roslaunch realsense_camera r200_nodelet_default.launch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ensure to have ROS Kinetic installed on your pc and to configure properly the odroid XU4 netbios name inside your PC /etc/hosts file (all details for &lt;a href=&quot;http://wiki.ros.org/ROS/NetworkSetup&quot;&gt;network setup here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;then you can show the image topics from camera using:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;ROS_MASTER_URI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;http://192.168.2.15:11311 rqt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Change 192.168.2.15 with the IP of your embedded linux box(Odroid XU4).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/11/Selection_033.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</content>

			
				<category term="robot" />
			
				<category term="ROS" />
			
			
				<category term="ODROID" />
			
				<category term="REALSENSE" />
			
				<category term="robot" />
			
				<category term="ROS" />
			
				<category term="SLAM" />
			

			<published>2017-11-01T16:54:06+00:00</published>
		</entry>
	
		<entry>
			<id>https://blog.alessiomorale.com/librepilot/linefollowers/2017/09/19/539.html</id>
			<title>Projects for Maker Faire 2017</title>
			<link href="https://blog.alessiomorale.com/librepilot/linefollowers/2017/09/19/539.html" rel="alternate" type="text/html" title="Projects for Maker Faire 2017" />
			<updated>2017-09-19T19:51:20+00:00</updated>

			
				
				<author>
					
						<name>[&quot;AlessioMorale&quot;]</name>
					
					
					
				</author>
			
			<summary></summary>
			<content type="html" xml:base="https://blog.alessiomorale.com/librepilot/linefollowers/2017/09/19/539.html">&lt;p&gt;Pictures of some projects that will be brought to Maker Faire Rome 2017&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/09/DSC_0183.jpg&quot; alt=&quot;Padre balistico&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/09/DSC_0179.jpg&quot; alt=&quot;Wanderer&quot; /&gt;&lt;/p&gt;
</content>

			
				<category term="LibrePilot" />
			
				<category term="linefollowers" />
			
			
				<category term="mfr17" />
			

			<published>2017-09-19T19:51:20+00:00</published>
		</entry>
	
		<entry>
			<id>https://blog.alessiomorale.com/librepilot/linefollowers/robot/uncategorized/2016/09/26/starting-linefollower-robots-librepilot.html</id>
			<title>&quot;Padre Balistico&quot; a (hopefully) fast line follower robot</title>
			<link href="https://blog.alessiomorale.com/librepilot/linefollowers/robot/uncategorized/2016/09/26/starting-linefollower-robots-librepilot.html" rel="alternate" type="text/html" title="&quot;Padre Balistico&quot; a (hopefully) fast line follower robot" />
			<updated>2016-09-26T21:32:06+00:00</updated>

			
				
				<author>
					
						<name>[&quot;AlessioMorale&quot;]</name>
					
					
					
				</author>
			
			<summary></summary>
			<content type="html" xml:base="https://blog.alessiomorale.com/librepilot/linefollowers/robot/uncategorized/2016/09/26/starting-linefollower-robots-librepilot.html">&lt;p&gt;Spending time with the guys at &lt;a href=&quot;http://www.officinerobotiche.it/&quot;&gt;Officine Robotiche&lt;/a&gt; (a huge thank to Stefano &lt;a href=&quot;https://www.facebook.com/ArtigianatoRobotico&quot;&gt;Artigianato Robotico&lt;/a&gt;), I’ve discovered the world of line followers. Apparently simple robots whose ultimate goal is to, guess what, follow a line 🙂&lt;/p&gt;

&lt;p&gt;This simple task involves several issues:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;reading sensors to determine the line displacement;&lt;/li&gt;
  &lt;li&gt;employing a control algorithm to determine the movement vector;&lt;/li&gt;
  &lt;li&gt;motor control;&lt;/li&gt;
  &lt;li&gt;several other ancillary stuffs, like telemetry, etc;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Obviously mine will run LibrePilot 🙂 and that simplifies a lot of things as most of the component needed are either in place or needs minor rework.&lt;/p&gt;

&lt;p&gt;Unfortunately I had no enough time to make a custom board so I went for some ready stuffs for sensor board and motor driver. Thanks to Stefano ‘s suggestions and after fiddling with their datasheets I ended with the following component list:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.pololu.com/product/2212&quot;&gt;1:30 gearmotor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.pololu.com/product/2130&quot;&gt;DRV8833 dual motor driver&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.pololu.com/product/961&quot;&gt;QTR-8RC Reflectance Sensor Array&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.pololu.com/product/2682&quot;&gt;12mm hex wheel adapters&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;soft foam 1:12 RC Car wheels bought at a local store (yes, the ones with real people you can talk to 🙂 )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It will be based on OpenPilot Revolution board given it has plenty of I/O and RF module onboard, useful for tuning and telemetry.&lt;/p&gt;

&lt;p&gt;I’ve also left some mounting holes that may host a NanoPI neo. One day it will be used for optical recognition for, i.e. better line speed planning.&lt;/p&gt;

&lt;p&gt;This is the frame I made for this robot&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/09/IMG_20160925_195509_HDR.jpg&quot; alt=&quot;frame&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is made of two parts, the main frame structure and sensor housing. It is available for download at Thingiverse (&lt;a href=&quot;http://www.thingiverse.com/thing:1792422&quot;&gt;http://www.thingiverse.com/thing:1792422&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;I used PETG for the main part and PLA (that is hard and have very low friction).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/09/IMG_20160925_195654_HDR.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/09/IMG_20160925_194736_HDR.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And here is a short video of the thing moving for the first time, using a standard RC transmitter (and related receiver) for control. It is already using gyro for yaw/trajectory stabilization&lt;/p&gt;

&lt;p&gt;There is still a big to do list ahead, including (but not limited to) reversable motors handling and sensor reading.&lt;/p&gt;

&lt;p&gt;LibrePilot had already almost everything needed. I added a specific target ( i called that roborevolution based on the revolution target, employing several changes needed to manage brushed motors and all the sensors needed). To have this first test working i only had to tweak the Servo motor drivers to handle higher frequencies and to increase the available resolution.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;youtube: http://www.youtube.com/watch?v=Xo0Zb39PRaw&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;edit: &lt;a href=&quot;https://github.com/AlessioMorale/LibrePilot/tree/amorale/linefollower&quot;&gt;here&lt;/a&gt; is the, still very hacky. source code i ‘m working on&lt;/p&gt;

&lt;p&gt;edit2: and it works 🙂 until i find some time for a new update post, here are two videos of its first tests&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;youtube: http://www.youtube.com/watch?v=EWf0fa_k2FA&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After a bit of tuning 🙂&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;youtube: https://www.youtube.com/watch?v=JDx6UnxeB-w&lt;/code&gt;&lt;/p&gt;
</content>

			
				<category term="LibrePilot" />
			
				<category term="linefollowers" />
			
				<category term="robot" />
			
				<category term="Uncategorized" />
			
			
				<category term="mfr16" />
			
				<category term="mfr17" />
			

			<published>2016-09-26T21:32:06+00:00</published>
		</entry>
	
		<entry>
			<id>https://blog.alessiomorale.com/librepilot/openpilot/uncategorized/2015/07/20/introducing-librepilot.html</id>
			<title>Introducing LibrePilot</title>
			<link href="https://blog.alessiomorale.com/librepilot/openpilot/uncategorized/2015/07/20/introducing-librepilot.html" rel="alternate" type="text/html" title="Introducing LibrePilot" />
			<updated>2015-07-20T20:40:21+00:00</updated>

			
				
				<author>
					
						<name>[&quot;AlessioMorale&quot;]</name>
					
					
					
				</author>
			
			<summary></summary>
			<content type="html" xml:base="https://blog.alessiomorale.com/librepilot/openpilot/uncategorized/2015/07/20/introducing-librepilot.html">&lt;p&gt;If you know a little bit of OpenPilot history you understand it was more about when, not “if “. After a little less than 4 years of contributions to the OpenPilot project it was time to part.&lt;/p&gt;

&lt;p&gt;Just to give a bit of context, I started with OP at the beginning of 2012, working at the early stage of the revolution firmware and hardware development. I mostly took care of the bare metal firmware side, sensors and peripherals interfaces, porting the code to various targets (i.e. STM32 F0 for GPS V9, STM32F411 for nano Nano). I‘ve also participated in hardware development/validation and testing since the initial Revolution prototypes (not the small officially sold, but the previous bigger brother &lt;a href=&quot;http://wp.me/p1tDhc-2H&quot;&gt;Revolution Prototype&lt;/a&gt; . I worked at flight performances improvement with mini quads for CC3D/Revo (the thing that, together with the acro+ develiped by Eric/CorvusCorax, made CC3D so popular in the 250 class racers) , implemented OneShot, notification smart leds support, a new sensor framework implementation and several other things.&lt;/p&gt;

&lt;p&gt;Later I’ll have to write some detailed chronological history of the awful situations, the falsification and everything else happened in the last 1 and 1/2 months that brought me, most of the development team and several key members to build a new project (LibrePilot) from the roots of OpenPilot.&lt;/p&gt;

&lt;p&gt;One question that i have been asked several time is: wouldn’t be better to join to an existing project, like TauLabs?&lt;/p&gt;

&lt;p&gt;This was actually one of the possibilities, the fact is that we are already a solid, very well proven team and this may have caused “integration “ issues.&lt;/p&gt;

&lt;p&gt;But the intentions are to collaborate with other projects, especially TauLabs. Probably one of the best (long term) bets for both projects is to converge to a single codebase that takes the best of both worlds. Unfortunately it is a quite demanding task as in the last couple of years they have diverged a lot, but surely it will worth the effort, both in term of features/quality than in term of critical mass of users and development team.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015/07/statement_departure.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</content>

			
				<category term="LibrePilot" />
			
				<category term="OpenPilot" />
			
				<category term="Uncategorized" />
			
			

			<published>2015-07-20T20:40:21+00:00</published>
		</entry>
	
		<entry>
			<id>https://blog.alessiomorale.com/firepick/2015/06/07/firepick-now-3d-printing.html</id>
			<title>FirePick now 3D printing</title>
			<link href="https://blog.alessiomorale.com/firepick/2015/06/07/firepick-now-3d-printing.html" rel="alternate" type="text/html" title="FirePick now 3D printing" />
			<updated>2015-06-07T10:03:52+00:00</updated>

			
				
				<author>
					
						<name>[&quot;AlessioMorale&quot;]</name>
					
					
					
				</author>
			
			<summary></summary>
			<content type="html" xml:base="https://blog.alessiomorale.com/firepick/2015/06/07/firepick-now-3d-printing.html">&lt;p&gt;It is now since several weeks that my Firepick has already started working as a 3D printer.&lt;/p&gt;

&lt;p&gt;There are some (expected) issues with calibration that i had not yet time to solve, this make a bit difficult to print large objects as the head does not move on a perfect flat plane but goes down when moving away from bed center point.&lt;/p&gt;

&lt;p&gt;Right now it is working with an Arduino mega/ramp and the &lt;a href=&quot;https://github.com/firepick-delta/Marlin&quot;&gt;modified Marlin firmware&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the process of printing the updated end effector mount for 3d printing hot end&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015/06/DSC_0643.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015/06/DSC_0644.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Updated end effector and 3D printing hot end mount.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015/06/DSC_0642.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</content>

			
				<category term="FirePick" />
			
			
				<category term="3dprinter" />
			
				<category term="CNC" />
			
				<category term="firepick" />
			
				<category term="pickandplace" />
			

			<published>2015-06-07T10:03:52+00:00</published>
		</entry>
	
		<entry>
			<id>https://blog.alessiomorale.com/multicopters/openpilot/2015/03/05/foldable-quad-for-ros-integration-experiments.html</id>
			<title>Foldable quad for ROS integration experiments</title>
			<link href="https://blog.alessiomorale.com/multicopters/openpilot/2015/03/05/foldable-quad-for-ros-integration-experiments.html" rel="alternate" type="text/html" title="Foldable quad for ROS integration experiments" />
			<updated>2015-03-05T09:59:58+00:00</updated>

			
				
				<author>
					
						<name>[&quot;AlessioMorale&quot;]</name>
					
					
					
				</author>
			
			<summary></summary>
			<content type="html" xml:base="https://blog.alessiomorale.com/multicopters/openpilot/2015/03/05/foldable-quad-for-ros-integration-experiments.html">&lt;p&gt;I’m shortly going to work integrating the OpenPilot telemetry with ROS.&lt;/p&gt;

&lt;p&gt;Main (long term) focus is indoor positioning and navigation.&lt;/p&gt;

&lt;p&gt;This is a quick mockup of the craft that will be used. Plates are going to be rebuilt to better host everything&lt;/p&gt;

&lt;p&gt;The reference platform  is made by&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OpenPilot Revolution flight controller;&lt;/li&gt;
  &lt;li&gt;OpenPilot GPSV9 with integrated magnetometer;&lt;/li&gt;
  &lt;li&gt;Control link using Revolution on board OPLink;&lt;/li&gt;
  &lt;li&gt;ODroid U3 sbc hosting Ubuntu server 14.04 with ROS Indigo;&lt;/li&gt;
  &lt;li&gt;WIFI card TL-WN722N (that uses an external antenna connected with a RPSMA);&lt;/li&gt;
  &lt;li&gt;USB Web Cam, initially used for optical flow.&lt;/li&gt;
  &lt;li&gt;Telemetry link using WIFI connection;&lt;/li&gt;
  &lt;li&gt;Connection between Revolution and Odroid using USB.&lt;/li&gt;
  &lt;li&gt;Sonar sensor for precise agl measurement
&lt;img src=&quot;/images/2015/03/DSC_000001.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015/03/DSC_0554.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015/03/DSC_0555.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015/03/DSC_0557.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015/03/DSC_0559.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015/03/P1020406.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015/03/P1020407.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015/03/P1020408.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</content>

			
				<category term="Multicopters" />
			
				<category term="OpenPilot" />
			
			
				<category term="Multicopter" />
			
				<category term="OpenPilot" />
			
				<category term="OR15" />
			
				<category term="ROS" />
			
				<category term="ROSINTEGRATIONPROJECT" />
			
				<category term="Wanderer" />
			

			<published>2015-03-05T09:59:58+00:00</published>
		</entry>
	
		<entry>
			<id>https://blog.alessiomorale.com/firepick/2015/02/19/firepick-update-3.html</id>
			<title>Firepick, update 3</title>
			<link href="https://blog.alessiomorale.com/firepick/2015/02/19/firepick-update-3.html" rel="alternate" type="text/html" title="Firepick, update 3" />
			<updated>2015-02-19T22:58:38+00:00</updated>

			
				
				<author>
					
						<name>[&quot;AlessioMorale&quot;]</name>
					
					
					
				</author>
			
			<summary></summary>
			<content type="html" xml:base="https://blog.alessiomorale.com/firepick/2015/02/19/firepick-update-3.html">&lt;p&gt;(thanks to Juha, from the FirePick Google group ) I got the printed plastic parts.&lt;/p&gt;

&lt;p&gt;after a minor cleanup of the captitive nuts seats. here is part of the delta mechanism assembled:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015/02/DSC_0539.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015/02/DSC_0542.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then it is the turn of the three arms secured to the bearing using nuts and washers. I used nilock nuts to prevent them from untightening&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015/02/DSC_0544.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A simple solution for feets: they are 19mm round soft plastic feets, sold in group of 8 for around 2€, and are used to be fitted in chair legs to dampen noise caused by moving them. With a bit of work an M5 bolt does fit nicely. I added a large washer to spread the weight evenly on the feet and prevent it to be ruined by the alu profile’s sharp edges.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015/02/DSC_0537-1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now it is time to wait for some other pieces to arrive, the most important being steppers and angle brackets.&lt;/p&gt;
</content>

			
				<category term="FirePick" />
			
			
				<category term="3dprinter" />
			
				<category term="CNC" />
			
				<category term="firepick" />
			
				<category term="pickandplace" />
			

			<published>2015-02-19T22:58:38+00:00</published>
		</entry>
	
</feed>